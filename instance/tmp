/* This code is generated by ladder2c */
#include &ltstm32f10x.h&gt
#include &ltstdbool.h&gt

#define SYS_CLK 24000000
#define DELAY_TIM_FREQUENCY 1000000
#define IN1_PORT GPIOB
#define IN1_PORT_CLK RCC_APB2Periph_GPIOB
#define IN0_PIN GPIO_Pin_0
#define IN1_PIN GPIO_Pin_1
#define IN2_PIN GPIO_Pin_2
#define IN3_PIN GPIO_Pin_3
#define IN4_PIN GPIO_Pin_4
#define OU1_PORT GPIOC
#define OU1_PORT_CLK RCC_APB2Periph_GPIOC
#define OU0_PIN GPIO_Pin_0
#define OU0_PIN GPIO_Pin_1
#define OU0_PIN GPIO_Pin_2
#define REG_1/*define_registers_etc.*/

void empty();
int get_input_value(int port, int pin) {
    if( GPIO_ReadInputDataBit(port, pin) ) {
        return 1;
    }
    else {
        retrn 0;
    }
}
void set_output(int port, int pin, int set) {
    if(set) {
        GPIO_WriteBit(port, pin, Bit_SET);
    }
    else {
        GPIO_WriteBit(port, pin, Bit_RESET);
    }
}
void delay_init() {
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
    TIM_TimeBaseStructure.TIM_Period = UINT16_MAX;
    TIM_TimeBaseStructure.TIM_Prescaler=(SYS_CLK/DELAY_TIM_FREQUENCY) - 1;
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
    TIM_Cmd(TIM4, ENABLE);
}
void delay_us( uint16_t us ) {
    TIM4->CNT = 0;
    while((uint16_t)(TIM4->CNT) <= us);
}
void delay_ms( uint16_t ms ) {
    int i;
    for (i=0; i < ms; i++) {
        delay_us(1000);
    }
}
int main(void) {
    delay_init();

    while(1) {
        if((get_input_value(IN1_PORT, IN4_PIN) &&
                (get_input_value(IN1_PORT, IN1_PIN) ||
                 !(get_input_value(IN1_PORT, IN2_PIN)) ||
                 get_input_value(IN1_PORT, IN3_PIN)))) {
            set_output(OU1_PORT, OU0_PIN, 1);
        }
        if((get_input_value(IN1_PORT, IN4_PIN) &&
                (get_input_value(IN1_PORT, IN1_PIN) ||
                 !(get_input_value(IN1_PORT, IN2_PIN)) ||
                 get_input_value(IN1_PORT, IN3_PIN)))) {
            delay_ms(21);
        }
    }
    return 0;
}