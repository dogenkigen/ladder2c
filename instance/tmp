/* This code is generated by ladder2c */
#include &ltstm32f10x.h&gt
#include &ltstdbool.h&gt

#define SYS_CLK 24000000
#define DELAY_TIM_FREQUENCY 1000000

bool R0=false;
bool R1=false;
bool R2=false;
bool R3=false;
bool R4=false;
bool R5=false;
bool R6=false;
bool R7=false;
bool R8=false;
bool R9=false;
bool R10=false;
/* You can add some custom functions here */
void init_gpio() {
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_Conf();
    NVIC_Conf();
    RCC_APB2PeriphCloclCmd(RCC_APB2Periph_GPIOB, ENABLE);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5| GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB,&GPIO_InitStructure);
    GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5| GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9);
    RCC_APB2PeriphCloclCmd(RCC_APB2Periph_GPIOA, ENABLE);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5| GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}
void delay_init() {
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
    TIM_TimeBaseStructure.TIM_Period = UINT16_MAX;
    TIM_TimeBaseStructure.TIM_Prescaler=(SYS_CLK/DELAY_TIM_FREQUENCY) - 1;
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
    TIM_Cmd(TIM4, ENABLE);
}
void delay_us( uint16_t us ) {
    TIM4->CNT = 0;
    while((uint16_t)(TIM4->CNT) <= us);
}
void delay_ms( uint16_t ms ) {
    int i;
    for (i=0; i < ms; i++) {
        delay_us(1000);
    }
}
int main(void) {
    init_gpio();
    delay_init();

    while(1) {
        if(((GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5) == Bit_SET ||
                GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_6) == Bit_SET ||
                GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_7) == Bit_SET) &&
                ((GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_4) == Bit_SET &&
                  (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1) == Bit_SET ||
                   GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2) == Bit_SET)) ||
                 GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3) == Bit_SET))) {
            GPIO_SetBits(GPIOB, GPIO_Pin_0);
        }
        if(((GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1) == Bit_SET ||
                GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2) == Bit_SET) &&
                !(GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0) == Bit_SET))) {
            delay_ms(15);
        }
        if((GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2) == Bit_SET &&
                (R0 ||
                 GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0) == Bit_SET ||
                 GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1) == Bit_SET))) {
            R0 = true;
        }
    }
    return 0;
}