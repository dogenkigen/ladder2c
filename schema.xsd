<!-- 
 Ladder2c is ladder logic to C code converter.
 Copyright (C) 2012  Maciej Laskowski

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!-- Only timers(T), registers(R), connectors(Y) and counters(C) can be 
		set as output and with id in 0-999 -->
	<xs:simpleType name="outputId">
		<xs:restriction base="xs:string">
			<xs:pattern value="[TRYC][0-9]{1,3}" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="contact">
		<xs:attribute name="id" type="xs:string" use="required" />
		<!-- Coil is normal true or normal false -->
		<xs:attribute name="normal" type="xs:boolean" />
	</xs:complexType>

	<xs:complexType name="counter">
		<xs:attribute name="id" type="outputId" use="required" />
		<!-- Value set when counter reaches its count -->
		<xs:attribute name="target" type="xs:boolean" use="required" />
		<xs:attribute name="countTo" type="xs:integer" use="required" />
	</xs:complexType>

	<!-- register/variable -->
	<xs:complexType name="reg">
		<xs:attribute name="id" type="outputId" use="required" />
	</xs:complexType>

	<!-- Time unit for timer -->
	<xs:simpleType name="unit">
		<xs:restriction base="xs:string">
			<xs:pattern value="ms|s" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="timer">
		<xs:attribute name="id" type="outputId" use="required" />
		<xs:attribute name="target" type="xs:boolean" use="required" />
		<xs:attribute name="delay" type="xs:integer" use="required" />
		<xs:attribute name="unit" type="unit" />
	</xs:complexType>

	<xs:simpleType name="coilType">
		<xs:restriction base="xs:string">
			<xs:pattern value="set|reset" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="coil">
		<xs:attribute name="id" type="outputId" use="required" />
		<xs:attribute name="type" type="coilType" />
	</xs:complexType>

	<xs:complexType name="elem">
		<xs:attribute name="id" type="xs:string" use="required" />
	</xs:complexType>

	<!-- Two complex types which can be used in cycle. From here -->
	<xs:complexType name="logicOne">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="1">
				<xs:element name="and" type="logicMultiple" />
				<xs:element name="or" type="logicMultiple" />
				<xs:element name="not" type="logicOne" />
				<xs:element name="elem" type="elem" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="logicMultiple">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="and" type="logicMultiple" />
				<xs:element name="or" type="logicMultiple" />
				<xs:element name="not" type="logicOne" />
				<xs:element name="elem" type="elem" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- To here -->

	<xs:complexType name="output">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="1">
				<xs:element name="and" type="logicMultiple" />
				<xs:element name="or" type="logicMultiple" />
				<xs:element name="not" type="logicOne" />
				<xs:element name="elem" type="elem" />
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="id" type="outputId" use="required" />
	</xs:complexType>

	<xs:complexType name="elementsType">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="contact" type="contact" maxOccurs="unbounded" />
				<xs:element name="coil" type="coil" maxOccurs="unbounded" />
				<xs:element name="counter" type="counter" maxOccurs="unbounded" />
				<xs:element name="reg" type="reg" maxOccurs="unbounded" />
				<xs:element name="timer" type="timer" maxOccurs="unbounded" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="diagramType">
		<xs:sequence>
			<xs:element name="output" type="output" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:element name="program">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="elements" type="elementsType"
					maxOccurs="1" />
				<xs:element name="diagram" type="diagramType" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

</xs:schema>